/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

/** RSA Key Pair for JavaScript */
export interface RsaKeyPairJs {
  publicKeyPem: string
  privateKeyPem: string
}
/** Ed25519 Key Pair for JavaScript */
export interface Ed25519KeyPairJs {
  signingKeyBytes: Buffer
  verifyingKeyBytes: Buffer
}
/** ECDSA Key Pair for JavaScript */
export interface EcdsaKeyPairJs {
  signingKeyBytes: Buffer
  verifyingKeyBytes: Buffer
}
/** Symmetric Encryption Module */
export declare class SymmetricCrypto {
  /** Generate AES-256 key */
  static generateAesKey(): Buffer
  /** Encrypt data using AES-256-GCM */
  static encryptAes(plaintext: Buffer, key: Buffer): Buffer
  /** Decrypt data using AES-256-GCM */
  static decryptAes(ciphertext: Buffer, key: Buffer): Buffer
  /** Generate ChaCha20-Poly1305 key */
  static generateChacha20Key(): Buffer
  /** Encrypt data using ChaCha20-Poly1305 */
  static encryptChacha20(plaintext: Buffer, key: Buffer): Buffer
  /** Decrypt data using ChaCha20-Poly1305 */
  static decryptChacha20(ciphertext: Buffer, key: Buffer): Buffer
}
/** Asymmetric Encryption Module */
export declare class AsymmetricCrypto {
  /** Generate RSA-2048 key pair */
  static generateRsaKeypair(): RsaKeyPairJs
  /** Generate RSA key pair with custom bit size */
  static generateRsaKeypairWithSize(bits: number): RsaKeyPairJs
  /** Encrypt data using RSA-OAEP */
  static encryptRsa(plaintext: Buffer, publicKeyPem: string): Buffer
  /** Decrypt data using RSA-OAEP */
  static decryptRsa(ciphertext: Buffer, privateKeyPem: string): Buffer
  /** Generate Ed25519 key pair */
  static generateEd25519Keypair(): Ed25519KeyPairJs
  /** Sign data using Ed25519 */
  static signEd25519(message: Buffer, signingKeyBytes: Buffer): Buffer
  /** Verify Ed25519 signature */
  static verifyEd25519(message: Buffer, signature: Buffer, verifyingKeyBytes: Buffer): boolean
  /** Generate ECDSA P-256 key pair */
  static generateEcdsaKeypair(): EcdsaKeyPairJs
  /** Sign data using ECDSA P-256 */
  static signEcdsa(message: Buffer, signingKeyBytes: Buffer): Buffer
  /** Verify ECDSA P-256 signature */
  static verifyEcdsa(message: Buffer, signature: Buffer, verifyingKeyBytes: Buffer): boolean
}
/** Hash Functions Module */
export declare class HashFunctions {
  /** Compute SHA-256 hash */
  static sha256(data: Buffer): Buffer
  /** Compute SHA-256 hash and return as hex string */
  static sha256Hex(data: Buffer): string
  /** Compute SHA-512 hash */
  static sha512(data: Buffer): Buffer
  /** Compute SHA-512 hash and return as hex string */
  static sha512Hex(data: Buffer): string
  /** Compute BLAKE3 hash */
  static blake3(data: Buffer): Buffer
  /** Compute BLAKE3 hash and return as hex string */
  static blake3Hex(data: Buffer): string
  /** Compute BLAKE3 hash with custom length */
  static blake3WithLength(data: Buffer, length: number): Buffer
  /** Compute HMAC-SHA256 */
  static hmacSha256(key: Buffer, message: Buffer): Buffer
  /** Verify HMAC-SHA256 */
  static verifyHmacSha256(key: Buffer, message: Buffer, expectedMac: Buffer): boolean
  /** Compute HMAC-SHA512 */
  static hmacSha512(key: Buffer, message: Buffer): Buffer
  /** Verify HMAC-SHA512 */
  static verifyHmacSha512(key: Buffer, message: Buffer, expectedMac: Buffer): boolean
}
/** Key Derivation Functions Module */
export declare class KeyDerivation {
  /** Derive key using Argon2 */
  static argon2(password: Buffer, salt: Buffer, length: number): Buffer
  /** Derive key using PBKDF2-SHA256 */
  static pbkdf2Sha256(password: Buffer, salt: Buffer, iterations: number, length: number): Buffer
  /** Derive key using PBKDF2-SHA512 */
  static pbkdf2Sha512(password: Buffer, salt: Buffer, iterations: number, length: number): Buffer
  /** Derive key using HKDF-SHA256 */
  static hkdfSha256(inputKey: Buffer, salt: Buffer | undefined | null, info: Buffer | undefined | null, length: number): Buffer
  /** Derive key using HKDF-SHA512 */
  static hkdfSha512(inputKey: Buffer, salt: Buffer | undefined | null, info: Buffer | undefined | null, length: number): Buffer
}
/** Random Generation Module */
export declare class RandomGenerator {
  /** Generate secure random bytes */
  static generateBytes(length: number): Buffer
  /** Generate secure random key */
  static generateKey(length: number): Buffer
  /** Generate nonce */
  static generateNonce(length: number): Buffer
  /** Generate salt */
  static generateSalt(): Buffer
}
